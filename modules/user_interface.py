"""
–¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ —Ç—Ä–∞—Ñ–∞—Ä–µ—Ç–æ–≤.

–ú–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–ª–∞—Å—Å UserInterface –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
—á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π,
–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–≤–æ–¥–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏.
"""

import re
import time
import glob
import os
import numpy as np
from pathlib import Path
from typing import Dict, List, Optional, Tuple
import cv2
from screeninfo import get_monitors


# –ò–º–ø–æ—Ä—Ç –∏–∑ —Ç–æ–≥–æ –∂–µ –ø–∞–∫–µ—Ç–∞
from .file_handler import FileHandler
from .config_manager import ConfigManager


class UserInterface:
    """
    –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.

    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
    - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –æ—à–∏–±–∫–∏)
    - –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
    - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

    Attributes:
        _config (ConfigManager): –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        _templates (Dict[str, str]): –®–∞–±–ª–æ–Ω—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        _prefixes (Dict[str, str]): –ü—Ä–µ—Ñ–∏–∫—Å—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
    """

    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
    MSG_INFO = "info"
    MSG_SUCCESS = "success"
    MSG_WARNING = "warning"
    MSG_ERROR = "error"
    MSG_DEBUG = "debug"

    def __init__(self, config_manager: ConfigManager):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.

        Args:
            config_manager (ConfigManager): –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        self._config = config_manager
        self._templates = {
            'header': "=" * 60 + "\n  –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ —Ç—Ä–∞—Ñ–∞—Ä–µ—Ç–æ–≤ v1.0\n  –ê–≤—Ç–æ—Ä: –ê—Ä–∞–±–æ–≤ –î–∞–ª–µ—Ä –ò—Å–∫–∞–Ω–¥–∞—Ä–æ–≤–∏—á\n" + "=" * 60,
            'result_divider': "‚îÄ" * 50
        }

        self._prefixes = {
            self.MSG_INFO: "",
            self.MSG_SUCCESS: "‚úÖ ",
            self.MSG_WARNING: "‚ö†Ô∏è ",
            self.MSG_ERROR: "‚ùå ",
            self.MSG_DEBUG: "[DEBUG] ",
        }

    # region –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π

    def show_message(self, text: str, kind: str = MSG_INFO) -> None:
        """
        –í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –ø—Ä–µ—Ñ–∏–∫—Å–æ–º.

        Args:
            text (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            kind (str): –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (info, success, warning, error, debug)
        """
        prefix = self._prefixes.get(kind, "")
        print(f"{prefix}{text}")

    def show_success(self, text: str) -> None:
        """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ."""
        self.show_message(text, kind=self.MSG_SUCCESS)

    def show_warning(self, text: str) -> None:
        """–í—ã–≤–æ–¥–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        self.show_message(text, kind=self.MSG_WARNING)

    def show_error(self, text: str) -> None:
        """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ."""
        self.show_message(text, kind=self.MSG_ERROR)

    def show_debug(self, text: str) -> None:
        """–í—ã–≤–æ–¥–∏—Ç –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏)."""
        if self._config.debug_mode:
            self.show_message(text, kind=self.MSG_DEBUG)

    # endregion

    # region –ú–µ—Ç–æ–¥—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

    def show_header(self) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
        self.show_message(self._templates['header'])
        if self._config.debug_mode:
            self.show_debug("–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤–∫–ª—é—á–µ–Ω")

    def show_environment_check(self, issues: List[str]) -> bool:
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è.

        Args:
            issues (List[str]): –°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º —Å –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º

        Returns:
            bool: False –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö, True –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º –Ω–µ—Ç
        """
        if not issues:
            self.show_success("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True

        self.show_error("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º:")
        for issue in issues:
            print(f"  ‚Ä¢ {issue}")

        return False

    def show_gerber_search_result(self, files: List[Path], order_number: str) -> None:
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ Gerber-—Ñ–∞–π–ª–æ–≤.

        Args:
            files (List[Path]): –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            order_number (str): –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
        """

        if not files:
            self.show_error(f"Gerber-—Ñ–∞–π–ª —Å –Ω–æ–º–µ—Ä–æ–º {order_number} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        if len(files) == 1:
            self.show_success(f"–ù–∞–π–¥–µ–Ω Gerber-—Ñ–∞–π–ª: {files[0].name}")
        else:
            rule_text = {
                'alphabetic_first': '–ø–µ—Ä–≤—ã–π –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É',
                'newest': '–ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ –¥–∞—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è',
                'oldest': '–ø–µ—Ä–≤—ã–π –ø–æ –¥–∞—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è'
            }.get(self._config.multiple_files_rule, '–ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π')

            self.show_warning(
                f"–ù–∞–π–¥–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤ —Å –Ω–æ–º–µ—Ä–æ–º {order_number}:")
            for f in files:
                print(f"  ‚Ä¢ {f.name}")
            self.show_message(f"–í—ã–±—Ä–∞–Ω {rule_text}: {files[0].name}")

    def show_parsing_stats(self, stats: Dict) -> None:
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ Gerber-—Ñ–∞–π–ª–∞.
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç - –≤—ã–≤–æ–¥–∏—Ç N/A.

        Args:
            stats (Dict): –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
        """
        self.show_success("Gerber-—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω:")

        # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –º–µ—Ç—Ä–∏–∫ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
        metric_descriptions = {
            'board_width_mm': "üìê –®–∏—Ä–∏–Ω–∞ –ø–ª–∞—Ç—ã",
            'board_height_mm': "üìê –í—ã—Å–æ—Ç–∞ –ø–ª–∞—Ç—ã",
            'contour_count': "üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç—É—Ä–æ–≤",
            'aperture_count': "üîß –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–ø–µ—Ä—Ç—É—Ä",
            'min_contour_area': "üìè –ú–∏–Ω. –ø–ª–æ—â–∞–¥—å –∫–æ–Ω—Ç—É—Ä–∞",
            'max_contour_area': "üìè –ú–∞–∫—Å. –ø–ª–æ—â–∞–¥—å –∫–æ–Ω—Ç—É—Ä–∞",
            'total_area_mm2': "üìä –°—É–º–º–∞—Ä–Ω–∞—è –ø–ª–æ—â–∞–¥—å",
        }

        # –§–æ—Ä–º–∞—Ç—ã –≤—ã–≤–æ–¥–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –º–µ—Ç—Ä–∏–∫–∏
        metric_formats = {
            'board_width_mm': lambda x: f"{x} –º–º",
            'board_height_mm': lambda x: f"{x} –º–º",
            'min_contour_area': lambda x: f"{x} –º–º¬≤",
            'max_contour_area': lambda x: f"{x} –º–º¬≤",
            'total_area_mm2': lambda x: f"{x} –º–º¬≤"
        }

        # –í—ã–≤–æ–¥–∏–º –≤—Å–µ 7 –º–µ—Ç—Ä–∏–∫ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        for metric_key, description in metric_descriptions.items():
            value = stats.get(metric_key, 'N/A')

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if value != 'N/A' and metric_key in metric_formats:
                formatted_value = metric_formats[metric_key](value)
            else:
                formatted_value = str(value)

            print(f"  {description}: {formatted_value}")

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        processing_time = stats.get('processing_time')
        if processing_time is not None:
            print(f"  ‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f} —Å–µ–∫")

    def show_scanning_instructions(self) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é."""
        print("\n" + "üì∑ –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Æ:")
        print(self._config.scan_instruction)

    def show_scan_info(self, scan_path: Path, dpi: int, size_pixels: Tuple[int, int],
                       size_mm: Tuple[float, float], file_size: int) -> None:
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–∞–Ω–µ.

        Args:
            scan_path (Path): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–∫–∞–Ω–∞
            dpi (int): –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å–∫–∞–Ω–∞
            size_pixels (Tuple[int, int]): –†–∞–∑–º–µ—Ä –≤ –ø–∏–∫—Å–µ–ª—è—Ö
            size_mm (Tuple[float, float]): –†–∞–∑–º–µ—Ä –≤ –º–∏–ª–ª–∏–º–µ—Ç—Ä–∞—Ö
            file_size (int): –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö
        """
        size_str = FileHandler.format_file_size(file_size)
        dpi_source = "–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ" if self._config.dpi_priority == 'metadata' else "–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"

        print(f"\nüìÑ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ö–ê–ù–ï:")
        print(f"  üìÅ –§–∞–π–ª: {scan_path.name}")
        print(f"  üîç DPI: {dpi} (–∏—Å—Ç–æ—á–Ω–∏–∫: {dpi_source})")
        print(f"  üìê –†–∞–∑–º–µ—Ä: {size_pixels[0]}√ó{size_pixels[1]} –ø–∏–∫—Å–µ–ª–µ–π")
        print(f"  üìè –†–∞–∑–º–µ—Ä: {size_mm[0]:.1f}√ó{size_mm[1]:.1f} –º–º")
        print(f"  üíæ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {size_str}")

    def show_preprocessing_result(self, success: bool, details: Dict) -> None:
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏.

        Args:
            success (bool): –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
            details (Dict): –î–µ—Ç–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        if success:
            self.show_success("–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            if 'original_size' in details:
                print(
                    f"  üì∑ –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {details['original_size']} –ø–∏–∫—Å–µ–ª–µ–π")
            if 'processed_size' in details:
                print(
                    f"  ‚úÇÔ∏è  –û–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {details['processed_size']} –ø–∏–∫—Å–µ–ª–µ–π")
            if 'contour_count' in details:
                print(f"  üî¢ –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç—É—Ä–æ–≤: {details['contour_count']}")
            if 'mean_contour_area' in details:
                print(
                    f"  üìä –°—Ä–µ–¥–Ω—è—è –ø–ª–æ—â–∞–¥—å –∫–æ–Ω—Ç—É—Ä–∞: {details['mean_contour_area']:.1f} px¬≤")
            if 'crop_ratio' in details:
                crop_pct = (1 - details['crop_ratio']) * 100
                print(f"  üìä –ü—Ä–æ—Ü–µ–Ω—Ç –æ–±—Ä–µ–∑–∫–∏: {crop_pct:.1f}%")

        else:
            self.show_error("–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
            if 'error' in details:
                print(f"  –ü—Ä–∏—á–∏–Ω–∞: {details['error']}")

    def show_reference_generation(self, size_pixels: Tuple[int, int],
                                  size_mm: Tuple[float, float], dpi: int) -> None:
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.

        Args:
            size_pixels (Tuple[int, int]): –†–∞–∑–º–µ—Ä –≤ –ø–∏–∫—Å–µ–ª—è—Ö
            size_mm (Tuple[float, float]): –†–∞–∑–º–µ—Ä –≤ –º–∏–ª–ª–∏–º–µ—Ç—Ä–∞—Ö
            dpi (int): –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        """
        self.show_success("–°–æ–∑–¥–∞–Ω–æ –±–∏–Ω–∞—Ä–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç—Ç–∞–ª–æ–Ω–∞:")
        print(f"  üìê –†–∞–∑–º–µ—Ä: {size_pixels[0]}√ó{size_pixels[1]} –ø–∏–∫—Å–µ–ª–µ–π")
        print(f"  üìè –†–∞–∑–º–µ—Ä: {size_mm[0]:.1f}√ó{size_mm[1]:.1f} –º–º")
        print(f"  üîç –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {dpi} DPI")

    def show_alignment_results(self, result: Dict) -> None:
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–≤–º–µ—â–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.

        Args:
            result (Dict): –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–≤–º–µ—â–µ–Ω–∏—è
        """
        correlation = result.get('correlation', 0.0)
        orientation = result.get('orientation', 'N/A')

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        from .data_models import calculate_alignment_status
        status_key, status_text = calculate_alignment_status(
            correlation,
            self._config.high_correlation_threshold,
            self._config.medium_correlation_threshold
        )

        # –î–æ–±–∞–≤–ª—è–µ–º emoji –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç–ª–∏—á–∏—è
        status_emoji = {
            "success": "‚úÖ",
            "warning": "üü°",
            "failed": "‚ùå"
        }.get(status_key, "")

        print("\n" + self._templates['result_divider'])
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–û–í–ú–ï–©–ï–ù–ò–Ø")
        print(self._templates['result_divider'])
        print(f"üéØ –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è:         {correlation:.3f}")
        print(f"üìê –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è —Å–∫–∞–Ω–∞:   {orientation}")
        print(f"üìã –°—Ç–∞—Ç—É—Å —Å–æ–≤–º–µ—â–µ–Ω–∏—è:  {status_text} {status_emoji}")

        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if self._config.include_debug_info and 'rotation' in result:
            print(f"üìê –ü–æ–≤–æ—Ä–æ—Ç:        {result['rotation']:+.2f}¬∞")
            print(f"‚ÜîÔ∏è –°–¥–≤–∏–≥ X:        {result['shift_x']:+.3f} –º–º")
            print(f"‚ÜïÔ∏è –°–¥–≤–∏–≥ Y:        {result['shift_y']:+.3f} –º–º")

        print(self._templates['result_divider'])

    def show_files_saved(self, saved_files: List[Path]) -> None:
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö.

        Args:
            saved_files (List[Path]): –°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        """
        if not saved_files:
            return

        self.show_success("–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ñ–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
        for file_path in saved_files:
            size_str = FileHandler.format_file_size(file_path.stat().st_size)
            print(f"  üìÅ {file_path.name} ({size_str})")

    # endregion

    # region –ú–µ—Ç–æ–¥—ã –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö

    def get_operator_name(self) -> str:
        """
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –§–ò–û –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π.

        Returns:
            str: –í–∞–ª–∏–¥–Ω–æ–µ –§–ò–û –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        """
        default = self._config.default_operator_name
        pattern = re.compile(r"^[A-Za-z–ê-–Ø–∞-—è–Å—ë][A-Za-z–ê-–Ø–∞-—è–Å—ë\-\.\s]{1,50}$")

        while True:
            name = input(
                f'\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (–∏–ª–∏ Enter –¥–ª—è "{default}"):\n> ').strip()
            if name == "":
                return default
            if pattern.fullmatch(name):
                return re.sub(r"\s+", " ", name)  # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
            self.show_error(
                "–§–ò–û –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 2-50 —Å–∏–º–≤–æ–ª–æ–≤: –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å, —Ç–æ—á–∫–∞")

    def get_order_number(self) -> Optional[str]:
        """
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π.

        Returns:
            Optional[str]: –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏–ª–∏ None –µ—Å–ª–∏ –≤—ã—Ö–æ–¥
        """
        if self._config.preset_order_number:
            self.show_success(
                f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {self._config.preset_order_number}")
            return self._config.preset_order_number

        example = self._config.generate_example_order_number()
        digits = self._config.order_number_digits

        while True:
            prompt = f"\n–í–≤–µ–¥–∏—Ç–µ {digits}-–∑–Ω–∞—á–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ (–ø—Ä–∏–º–µ—Ä: {example}) –∏–ª–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞:\n> "
            value = input(prompt).strip()

            if value.lower() == 'exit':
                return None

            if re.fullmatch(rf'\d{{{digits}}}', value):
                return value

            self.show_error(f"–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ {digits} —Ü–∏—Ñ—Ä")

    # endregion

    # region –ú–µ—Ç–æ–¥—ã –æ–∂–∏–¥–∞–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏

    def wait_for_scan_file(self) -> Path:
        """
        –û–∂–∏–¥–∞–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å–∫–∞–Ω–∞ –≤ –ø–∞–ø–∫–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.

        Returns:
            Path: –ü—É—Ç—å –∫ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É —Å–∫–∞–Ω–∞

        Raises:
            TimeoutError: –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
        """
        self.show_message(
            f"–û–∂–∏–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å–∫–∞–Ω–∞ –≤ –ø–∞–ø–∫–µ: {self._config.scan_folder}")
        self.show_message("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: " +
                          ", ".join(self._config.supported_image_formats))

        start_time = time.time()
        timeout = self._config.scan_wait_timeout

        while True:
            if timeout > 0 and (time.time() - start_time) > timeout:
                raise TimeoutError(
                    f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å–∫–∞–Ω–∞ ({timeout} —Å–µ–∫)")

            # –ò—â–µ–º –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            scan_files = []
            for ext in self._config.supported_image_formats:
                pattern = str(self._config.scan_folder / f"*{ext}")
                scan_files.extend(glob.glob(pattern, recursive=False))

            if scan_files:
                # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π —Ñ–∞–π–ª
                newest_file = max(scan_files, key=os.path.getmtime)
                scan_path = Path(newest_file)
                self.show_success(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–∞–π–ª —Å–∫–∞–Ω–∞: {scan_path.name}")
                return scan_path

            time.sleep(self._config.file_check_interval)

    # endregion

    # region –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã (–≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)

    def ask_create_directories(self, missing_dirs: List[str]) -> bool:
        """
        –°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π.

        Args:
            missing_dirs (List[str]): –°–ø–∏—Å–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π

        Returns:
            bool: True –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        """
        self.show_warning("–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:")
        for dir_path in missing_dirs:
            print(f"  ‚Ä¢ {dir_path}")

        while True:
            response = input(
                "\n–°–æ–∑–¥–∞—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏? (y/n): ").strip().lower()
            if response in ['y', 'yes', '–¥–∞', '–¥']:
                return True
            elif response in ['n', 'no', '–Ω–µ—Ç', '–Ω']:
                return False
            self.show_error("–í–≤–µ–¥–∏—Ç–µ 'y' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ 'n' –¥–ª—è –æ—Ç–º–µ–Ω—ã")

    def ask_preprocessing_action(self) -> int:
        """
        –°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –¥–µ–π—Å—Ç–≤–∏–∏ –ø—Ä–∏ —á–∞—Å—Ç–∏—á–Ω–æ–π –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–µ.

        Returns:
            int: –í—ã–±—Ä–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-4)
        """
        self.show_warning(
            "–†–∞–∑–º–µ—Ä—ã —Å–∫–∞–Ω–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å —ç—Ç–∞–ª–æ–Ω–æ–º –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ–ø—É—Å–∫–∞")
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1 ‚Äî –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É")
        print("2 ‚Äî –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
        print("3 ‚Äî –í—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑")
        print("4 ‚Äî –í—ã–π—Ç–∏")

        while True:
            choice = input("> ").strip()
            if choice in ['1', '2', '3', '4']:
                return int(choice)
            self.show_error("–í–≤–µ–¥–∏—Ç–µ 1, 2, 3 –∏–ª–∏ 4")

    def ask_alignment_failed_action(self, correlation: float) -> int:
        """
        –°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –¥–µ–π—Å—Ç–≤–∏–∏ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–º —Å–æ–≤–º–µ—â–µ–Ω–∏–∏.

        Args:
            correlation (float): –£—Ä–æ–≤–µ–Ω—å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏

        Returns:
            int: –í—ã–±—Ä–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-3)
        """
        if correlation < self._config.low_correlation_threshold:
            self.show_error("–°–æ–≤–º–µ—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
        else:
            self.show_warning(
                "–°–æ–≤–º–µ—â–µ–Ω–∏–µ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ –∏–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤—ã—Å–æ–∫–∏–π –±—Ä–∞–∫")

        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1 ‚Äî –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
        print("2 ‚Äî –í–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞")
        print("3 ‚Äî –í—ã–π—Ç–∏")

        while True:
            choice = input("> ").strip()
            if choice in ['1', '2', '3']:
                return int(choice)
            self.show_error("–í–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 3")

    def ask_parsing_failed_action(self, error_details: Optional[str] = None) -> int:
        """
        –°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –¥–µ–π—Å—Ç–≤–∏–∏ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–º –ø–∞—Ä—Å–∏–Ω–≥–µ.

        Args:
            error_details (Optional[str]): –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏

        Returns:
            int: –í—ã–±—Ä–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-4)
        """
        self.show_error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Gerber-—Ñ–∞–π–ª–∞")
        if error_details:
            print(f"–ü—Ä–∏—á–∏–Ω–∞: {error_details}")

        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1 ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏")
        print("2 ‚Äî –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ —Å —Ç–µ–º –∂–µ —Ñ–∞–π–ª–æ–º")
        print("3 ‚Äî –í–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞")
        print("4 ‚Äî –í—ã–π—Ç–∏")

        while True:
            choice = input("> ").strip()
            if choice in ['1', '2', '3', '4']:
                return int(choice)
            self.show_error("–í–≤–µ–¥–∏—Ç–µ 1, 2, 3 –∏–ª–∏ 4")

    def show_main_menu(self) -> int:
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–æ–≥—Ä–∞–º–º—ã.

        Returns:
            int: –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é (1-2)
        """
        print("\n" + "="*40)
        print("–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ")
        print("="*40)
        print("1 ‚Äî –í–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞")
        print("2 ‚Äî –í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")

        while True:
            choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()
            if choice in ['1', '2']:
                return int(choice)
            self.show_error("–í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2")

    def confirm_exit(self) -> bool:
        """
        –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.

        Returns:
            bool: True –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≤—ã–π—Ç–∏
        """
        while True:
            response = input(
                "\n–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏? (y/n): ").strip().lower()
            if response in ['y', 'yes', '–¥–∞', '–¥']:
                return True
            elif response in ['n', 'no', '–Ω–µ—Ç', '–Ω']:
                return False
            self.show_error("–í–≤–µ–¥–∏—Ç–µ 'y' –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–ª–∏ 'n' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")

    # endregion

    def show_scan_waiting_animation(self, timeout: float, elapsed: float) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é –æ–∂–∏–¥–∞–Ω–∏—è —Å–∫–∞–Ω–∞."""
        animation_chars = ["‚£æ", "‚£Ω", "‚£ª", "‚¢ø", "‚°ø", "‚£ü", "‚£Ø", "‚£∑"]
        anim_index = int(elapsed * 10) % len(animation_chars)
        anim_char = animation_chars[anim_index]

        remaining = int(timeout - elapsed) if timeout > 0 else "‚àû"
        print(f"\r{anim_char} –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞... (—Ç–∞–π–º–∞—É—Ç: {remaining} —Å–µ–∫) ",
              end="", flush=True)

    def ask_scan_timeout_action(self, last_existing_file: Optional[Path]) -> int:
        """
        –°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –¥–µ–π—Å—Ç–≤–∏–∏ –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–∫–∞–Ω–∞.

        Returns:
            int: –í—ã–±—Ä–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-4)
        """
        self.show_warning("–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –∏—Å—Ç–µ–∫–ª–æ")

        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1 ‚Äî –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞")

        # –ü—É–Ω–∫—Ç 2 –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
        if last_existing_file:
            print(
                f"2 ‚Äî –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª: {last_existing_file.name}")

        print("3 ‚Äî –í–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞")
        print("4 ‚Äî –í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")

        while True:
            choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-4): ").strip()

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏–π
            valid_choices = ['1', '3', '4']
            if last_existing_file:
                valid_choices.append('2')

            if choice in valid_choices:
                return int(choice)

            self.show_error(
                f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏–π: {', '.join(valid_choices)}")

    def ask_scan_failed_action(self) -> int:
        """
        –°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –¥–µ–π—Å—Ç–≤–∏–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.

        Returns:
            int: –í—ã–±—Ä–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-3)
        """
        self.show_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ —Å–∫–∞–Ω–∞")

        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1 ‚Äî –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
        print("2 ‚Äî –í–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞")
        print("3 ‚Äî –í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")

        while True:
            choice = input("> ").strip()
            if choice in ['1', '2', '3']:
                return int(choice)
            self.show_error("–í–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 3")

    def show_debug(self, text: str) -> None:
        """–í—ã–≤–æ–¥–∏—Ç –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏)."""
        if self._config.debug_mode:
            self.show_message(text, kind=self.MSG_DEBUG)

    def ask_preprocessing_failed_action(self, error_details: str) -> int:
        """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–µ."""
        self.show_error(f"–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {error_details}")
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1 ‚Äî –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
        print("2 ‚Äî –í—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑")
        print("3 ‚Äî –í—ã–π—Ç–∏")

        while True:
            choice = input("> ").strip()
            if choice in ['1', '2', '3']:
                return int(choice)
            self.show_error("–í–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 3")

    def show_dimension_mismatch_warning(self, gerber_size_mm: Tuple[float, float], scan_size_mm: Tuple[float, float], tolerance_percent: float) -> None:
        """
            –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤.

            Args:
                gerber_size_mm (Tuple[float, float]): –†–∞–∑–º–µ—Ä—ã —ç—Ç–∞–ª–æ–Ω–∞ (—à–∏—Ä–∏–Ω–∞, –≤—ã—Å–æ—Ç–∞) –≤ –º–º.
                scan_size_mm (Tuple[float, float]): –†–∞–∑–º–µ—Ä—ã –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ —Å–∫–∞–Ω–∞ (—à–∏—Ä–∏–Ω–∞, –≤—ã—Å–æ—Ç–∞) –≤ –º–º.
                tolerance_percent (float): –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–æ–ø—É—Å–∫ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö.
            """
        self.show_warning(
            "–†–∞–∑–º–µ—Ä—ã —Å–∫–∞–Ω–∞ –∏ —ç—Ç–∞–ª–æ–Ω–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ–ø—É—Å–∫–∞!")
        print(
            f"  - –†–∞–∑–º–µ—Ä—ã —ç—Ç–∞–ª–æ–Ω–∞ (Gerber): {gerber_size_mm[0]:.1f} x {gerber_size_mm[1]:.1f} –º–º")
        print(
            f"  - –†–∞–∑–º–µ—Ä—ã —Å–∫–∞–Ω–∞ (–æ–±—Ä–µ–∑–∞–Ω.): {scan_size_mm[0]:.1f} x {scan_size_mm[1]:.1f} –º–º")

        diff_w = abs(gerber_size_mm[0] - scan_size_mm[0])
        diff_h = abs(gerber_size_mm[1] - scan_size_mm[1])
        print(f"  - –ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ:   {diff_w:.1f} x {diff_h:.1f} –º–º")

        print(f"  - –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–æ–ø—É—Å–∫:     {tolerance_percent:.1f}%")

    def show_combined_image(self, image: np.ndarray) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–≤–º–µ—â–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ü–µ–Ω—Ç—Ä–µ —Å –º–∞—Å—à—Ç–∞–±–æ–º."""
        monitor = get_monitors()[0]
        screen_width, screen_height = monitor.width, monitor.height
        h, w = image.shape[:2]

        # –ú–∞—Å—à—Ç–∞–± –¥–æ 80% —ç–∫—Ä–∞–Ω–∞
        max_width, max_height = int(
            screen_width * 0.8), int(screen_height * 0.8)
        if w > max_width or h > max_height:
            scale = min(max_width / w, max_height / h)
            new_w, new_h = int(w * scale), int(h * scale)
            image = cv2.resize(image, (new_w, new_h),
                               interpolation=cv2.INTER_AREA)

        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
        x = (screen_width - new_w) // 2
        y = (screen_height - new_h) // 2
        cv2.namedWindow('Result', cv2.WINDOW_NORMAL)
        cv2.resizeWindow('Result', new_w, new_h)
        cv2.moveWindow('Result', x, y)
        cv2.imshow('Result', image)
        cv2.waitKey(0)
        cv2.destroyAllWindows()
